# SPDX-License-Identifier: MIT

# Configure package file for this CMake package.
#
# Find this package with find_dependency(<pkg> CONFIG REQUIRED).
#
# This package requires CMake >= 3.17 (we may want message(CHECK_*) at some
# point).

# If this module has a dependency, this other module defines the
# find_dependency() macro for that purpose.
include(CMakeFindDependencyMacro)

# Internal function; do not use.
#
# @param format_type "plain" for plain clang-format, "git" for
# git-clang-format.
#
# @param tgt The target whose sources to run (git-)clang-format for.
#
# @param format_check_tgt The target that will run the (git-)clang-format check
# for the specified target's sources.
#
# @param command_or_empty The specified (git-)clang-format command to run. A
# few flags will be appended after them.
#
# @param check_main_target The target to add the created check target as a
# dependency of. Helpful to be able to run (git-)clang-format checks on all
# targets of the CMake build.
#
# @param build_depends Whether building the target "tgt" should depend on the
# check being done.
#
# @param ref_commit Reference commit. Only used if "format_type" is not "plain".
function(__ade_clang_format_check_target
    format_type
    tgt
    format_check_tgt
    command
    check_main_target
    build_depends
    ref_commit)
  get_target_property(tgt_sources "${tgt}" SOURCES)
  get_target_property(tgt_source_dir "${tgt}" SOURCE_DIR)

  message(VERBOSE
    "Creating check target ${format_check_tgt} of type \"${format_type}\".")
  if(NOT "${tgt_sources}" STREQUAL "")
    if("${format_type}" STREQUAL plain)
      add_custom_target("${format_check_tgt}"
        COMMENT "Running format check for target ${tgt}..."
        WORKING_DIRECTORY "${tgt_source_dir}"
        COMMAND ${command} -n --Werror ${tgt_sources})
    else()
      add_custom_target("${format_check_tgt}"
        COMMENT "Running format check for target ${tgt} with ref commit \"${ref_commit}\"..."
        WORKING_DIRECTORY "${tgt_source_dir}"
        # diff makes git-clang-format not change anything but print the
        # before-and-after instead. This is a simple, albeit annoying,
        # way for a contributor to know what formatting to fix in their
        # contribution.
        #
        # A better way of doing this is using a bot. Simplifying
        # the implementation of that could be done with issue #25.
        COMMAND ${command} -q --diff "${ref_commit}" -- ${tgt_sources})
    endif()
  else()
    # This case has to be handled separately, since running clang-format with
    # no sources causes it to take the source through stdin. git-clang-format
    # doesn't care, but while we're at it let's keep the logic of both
    # similar.
    add_custom_target("${format_check_tgt}"
      WORKING_DIRECTORY "${tgt_source_dir}"
      COMMAND echo "Not running format check for target ${tgt}: No sources")
  endif()

  message(VERBOSE "Adding ${format_check_tgt} as a dependency of ${check_main_target}.")
  add_dependencies("${check_main_target}" "${format_check_tgt}")

  if(build_depends)
    message(VERBOSE "Adding ${format_check_tgt} as a dependency of ${tgt}.")
    add_dependencies("${tgt}" "${format_check_tgt}")
  endif()
endfunction()

# Internal function; do not use.
#
# @param format_type "plain" for plain clang-format, "git" for
# git-clang-format.
#
# @param tgt The target whose sources to run (git-)clang-format for.
#
# @param format_fix_tgt The target that will run (git-)clang-format for the
# specified target.
#
# @param command The specified (git-)clang-format command to run. A few
# flags will be appended after them.
#
# @param fix_main_target The target to add the created check target as a
# dependency of. Helpful to be able to run (git-)clang-format checks on all
# targets of the CMake build.
#
# @param ref_commit Reference commit. Only used if "format_type" is not "plain".
function(__ade_clang_format_fix_target
    format_type
    tgt
    format_fix_tgt
    command
    fix_main_target
    ref_commit)
  if(TARGET "${format_fix_tgt}")
    message(FATAL_ERROR
      "Cannot create fix target \"${format_fix_tgt}\" for AdeClangFormat: A "
      "target with the same name already exists. Use the "
      "POSTFIX keyword of ade_clang_format_(git/plain)_targets() to specify a "
      "different target.")
  endif()

  get_target_property(tgt_sources "${tgt}" SOURCES)
  get_target_property(tgt_source_dir "${tgt}" SOURCE_DIR)

  message(VERBOSE
    "Creating fix target ${format_fix_tgt} of type \"${format_type}\".")
  if(NOT "${tgt_sources}" STREQUAL "")
    if ("${format_type}" STREQUAL plain)
      add_custom_target("${format_fix_tgt}"
        COMMENT "Running format fix for target ${tgt}..."
        WORKING_DIRECTORY "${tgt_source_dir}"
        COMMAND ${command} -i ${tgt_sources})
    else()
      add_custom_target("${format_fix_tgt}"
        COMMENT "Running format fix for target ${tgt} with ref commit \"${ref_commit}\"..."
        WORKING_DIRECTORY "${tgt_source_dir}"
        COMMAND ${command} "${ref_commit}" -- ${tgt_sources})
    endif()
  else()
    # This case has to be handled separately, since running clang-format with
    # no sources causes it to take the source through stdin. git-clang-format
    # doesn't care, but while we're at it let's keep the logic of both
    # similar.
    add_custom_target("${format_fix_tgt}"
      WORKING_DIRECTORY "${tgt_source_dir}"
      COMMAND echo "Not running format fix for target ${tgt}: No sources")
  endif()

  message(VERBOSE
    "Adding ${format_fix_tgt} as a dependency of ${fix_main_target}.")
  add_dependencies("${fix_main_target}" "${format_fix_tgt}")
endfunction()

# Internal function; do not use.
#
# @param format_type "plain" for plain clang-format, "git" for
# git-clang-format.
function(__ade_clang_format_targets_catchall format_type)
  message(VERBOSE "AdeClangFormat: Parsing arguments.")

  ####
  #
  # TL;DR: This is an explanation on how to pass arguments to CMake functions.
  # For literal strings, if they don't contain whitespaces or
  # semicolons, then you *may* use the my_string syntax, otherwise use the
  # "my_string" syntax. For variable expansion, if you want to expand a
  # variable containing a list into zero or more function arguments, then do
  # the variable expansion outside of any quotes ${like_this}. Otherwise, do
  # the variable expansion inside quotes "${like_this}".
  #
  ####
  #
  # Most of this CMake package needs to handle variables and strings that may
  # have whitespaces, as well as lists. To explain how supporting that works,
  # let's have a FULL explanation of CMake lists, strings and variable
  # expansion.
  #
  # According to experimentation, there are 3 cases:
  #
  # 1) Quoted strings ("like \t \n ; this") are ALWAYS considered a single
  # unmodified argument, whether the string contains whitespaces, semicolons
  # or is an empty string. If a variable is expanded inside quotes
  # ("${like_this}"), the expansion is literally replaced by the contents of
  # the variable to produce the string, even if the variable is a list. By the
  # way, in CMake a list is a semicolon-separated string. So:
  #     set(my_list a " b " "c ;d")
  # ...produces a list variable of four-elements: "a; b ;c ;d".
  #
  # 2) Unquoted string literal: Begins and ends in first non-whitespace,
  # non-semicolon character. E.g.:
  #     HELLO  \t\n  WORLD;! ; \ \; ; ?;;;;
  # ...is considered to be five arguments, the same as if we had written:
  #     "HELLO" "WORLD" "!" " ;" "?"
  # Because this is really weird, for clarity and to avoid bugs it's advisable
  # to quote literal strings unless what happens is obvious.
  #
  # 3) Unquoted variable expansion: This is the variable expansion to use if
  # you want to expand a list in a situation where you want one argument per
  # list item. Any unquoted variable expansion is considered to be a special
  # situation where the variable is considered to be a list, with each item
  # separated by a semicolon. Therefore, if the "my_list" variable is set like
  # this...
  #     set(my_list qwer "as  df ;  z\n xc\tv")
  # ...then this...
  #     ${my_list}
  # ...expands to three arguments, as if we had written:
  #     "qwer" "as  df " "  z\n xc\tv"
  #
  # WARNING: You *cannot* always use unquoted variable expansion. For example:
  #     if(${my_list} STREQUAL "")
  # ...when my_list is empty will expand to:
  #     if(STREQUAL "")
  # ...which will cause a CMake error. Instead, you probably wanted to write:
  #     if("${my_list}" STREQUAL "")

  # For a quick explanation of cmake_parse_arguments(), see:
  # https://youtu.be/IZXNsim9TWI?t=1618
  cmake_parse_arguments(
    parsed                           # Magic var prefix

    # Here we want an actual single argument containing semicolons, since this
    # is what cmake_parse_arguments() expects as this argument.
    "BUILD_DEPENDS;NO_BUILD_DEPENDS" # Options

    # Same here
    "FIX_MAIN_TARGET;FIX_POSTFIX;CHECK_MAIN_TARGET;CHECK_POSTFIX;REF_COMMIT" # Single-value keywords

    # Same here
    "TARGETS;COMMAND"                # Multi-value keywords

    # Here we want to pass one argument per list item of ARGN (which is the
    # list of arguments passed to *this* function past the last expected
    # argument). So this variable expansion must not be inside a quoted string.
    ${ARGN})

  if(parsed_UNPARSED_ARGUMENTS)
    message(FATAL_ERROR
      "Unrecognized argument(s): ${parsed_UNPARSED_ARGUMENTS}.")
  endif()

  if(NOT DEFINED parsed_TARGETS)
    message(FATAL_ERROR "TARGETS keyword missing.")
  endif()

  foreach(tgt IN LISTS parsed_TARGETS)
    if(NOT TARGET "${tgt}")
      message(FATAL_ERROR "Target \"${tgt}\" does not exist")
    endif()
  endforeach()

  # Parse & sanitize BUILD_DEPENDS and NO_BUILD_DEPENDS
  if(parsed_NO_BUILD_DEPENDS OR parsed_BUILD_DEPENDS)
    if(parsed_NO_BUILD_DEPENDS AND parsed_BUILD_DEPENDS)
      message(FATAL_ERROR
        "Both BUILD_DEPENDS and NO_BUILD_DEPENDS were specified to "
        "AdeClangFormat.")
    endif()
    if(parsed_NO_BUILD_DEPENDS)
      set(BUILD_DEPENDS OFF)
    else()
      set(BUILD_DEPENDS ON)
    endif()
  else()
    if(DEFINED CACHE{ADE_CLANG_FORMAT_BUILD_DEPENDS} AND NOT ADE_CLANG_FORMAT_BUILD_DEPENDS)
      set(BUILD_DEPENDS OFF)
    else()
      set(BUILD_DEPENDS ON)
    endif()
  endif()

  if(DEFINED parsed_CHECK_POSTFIX)
    set(CHECK_POSTFIX "${parsed_FIX_POSTFIX}")
  else()
    set(CHECK_POSTFIX "-formatcheck")
  endif()

  if(DEFINED parsed_CHECK_MAIN_TARGET)
    set(CHECK_MAIN_TARGET ${parsed_CHECK_MAIN_TARGET})
  elseif(DEFINED CACHE{ADE_CLANG_FORMAT_MAIN_TARGET})
    set(CHECK_MAIN_TARGET ${ADE_CLANG_FORMAT_MAIN_TARGET})
  else()
    set(CHECK_MAIN_TARGET formatcheck)
  endif()

  if(DEFINED parsed_FIX_POSTFIX)
    set(FIX_POSTFIX "${parsed_FIX_POSTFIX}")
  else()
    set(FIX_POSTFIX "-formatfix")
  endif()

  if(DEFINED parsed_FIX_MAIN_TARGET)
    set(FIX_MAIN_TARGET ${parsed_FIX_MAIN_TARGET})
  elseif(DEFINED CACHE{ADE_CLANG_FORMAT_MAIN_TARGET})
    set(FIX_MAIN_TARGET ${ADE_CLANG_FORMAT_MAIN_TARGET})
  else()
    set(FIX_MAIN_TARGET formatfix)
  endif()

  if("${format_type}" STREQUAL plain AND DEFINED ADE_CLANG_FORMAT)
    message(DEPRECATION
      "Use of the ADE_CLANG_FORMAT variable is "
      "deprecated; use ADE_CLANG_FORMAT_PLAIN instead.")
  endif()

  if(DEFINED parsed_COMMAND)
    set(COMMAND ${parsed_COMMAND})
  elseif("${format_type}" STREQUAL plain)
    if(DEFINED CACHE{ADE_CLANG_FORMAT_PLAIN})
      set(COMMAND ${ADE_CLANG_FORMAT_PLAIN})
    elseif(DEFINED CACHE{ADE_CLANG_FORMAT})
      set(COMMAND ${ADE_CLANG_FORMAT})
    endif()
  elseif("${format_type}" STREQUAL git AND DEFINED ADE_CLANG_FORMAT_PLAIN)
    set(COMMAND ${ADE_CLANG_FORMAT_GIT})
  else()
    message(VERBOSE
      "AdeClangFormat: COMMAND keyword missing and "
      "ADE_CLANG_FORMAT_PLAIN is undefined; format targets will not"
      "be created.")

    # Do nothing; stop now without any side-effects.
    #
    # The reason for this choice, rather than creating no-op targets, is
    # that we want to ensure that we can't get it wrong; if there is no
    # command, then trying to check or fix formatting should be an error,
    # rather than silently succeeding.
    #
    # Also, if no command is specified, we should not report an error on CMake
    # generation, we should only refrain from creating the targets. This is for
    # these two reasons:
    #
    # 1) To remain consistent with CMake's clang-tidy integration, where if you
    # don't define the CMAKE_<lang>_CLANG_TIDY variable nor the
    # <lang>_CLANG_TIDY target property, then clang-tidy is not run.
    #
    # 2) To avoid users of this CMake package having to do something like
    # "If we're on the CI machine, then use AdeClangFormat, otherwise do
    # nothing." This sort of thing would be messy and error-prone, because it
    # forces having specific configurations for the CI machine inside the
    # CMakeLists.txt, which should generally remain declarative and focus
    # mostly just on describing project structure and install package
    # structure. Instead, CI configs and dev configs for the CMake project
    # should be controlled externally to the CMake project, e.g. via the
    # CMakePresets.json file, via some CMake cache variable specified on the
    # commandline, or via an environment variable. To be fair, if we do not
    # need to call clang-format (e.g. non-dev, non-CI environment), then the
    # calling CMakeLists.txt might try not to attempt finding this package so
    # that these setups don't need this package installed. But still, we should
    # not make that decision here. Let's leave that decision to whoever uses
    # us; they know their setup better than we do.
    return()
  endif()

  if("${format_type}" STREQUAL plain)
    if(DEFINED parsed_REF_COMMIT)
      message(SEND_ERROR
        "ade_clang_format_plain_targets() does not take a REF_COMMIT.")
    endif()
  else()
    if(DEFINED parsed_REF_COMMIT)
      set(REF_COMMIT "${parsed_REF_COMMIT}")
    elseif(DEFINED CACHE{ADE_CLANG_FORMAT_GIT_REF_COMMIT})
      set(REF_COMMIT "${ADE_CLANG_FORMAT_GIT_REF_COMMIT}")
    elseif(DEFINED ENV{ADE_CLANG_FORMAT_GIT_REF_COMMIT})
      set(REF_COMMIT "$ENV{ADE_CLANG_FORMAT_GIT_REF_COMMIT}")
    else()
      message(SEND_ERROR
        "A non-NOOP call to ade_clang_format_git_targets() was made with "
        "ADE_CLANG_FORMAT_GIT_REF_COMMIT defined neither as a cache nor an "
        "environment variable, and with REF_COMMIT not specified on the "
        "invocation.")
    endif()
  endif()

  if(NOT TARGET "${CHECK_MAIN_TARGET}")
    message(VERBOSE "Creating main check target ${CHECK_MAIN_TARGET}.")
    add_custom_target("${CHECK_MAIN_TARGET}"
      COMMENT "Running format check sub-targets.")
  endif()

  if(NOT TARGET "${FIX_MAIN_TARGET}")
    message(VERBOSE "Creating main fix target ${FIX_MAIN_TARGET}.")
    add_custom_target("${FIX_MAIN_TARGET}"
      COMMENT "Running format fix sub-targets.")
  endif()

  foreach(tgt IN LISTS parsed_TARGETS)
    set(format_check_tgt "${tgt}${CHECK_POSTFIX}")
    set(format_fix_tgt "${tgt}${FIX_POSTFIX}")

    __ade_clang_format_check_target(
      "${format_type}"
      "${tgt}"
      "${format_check_tgt}"
      "${COMMAND}"
      "${CHECK_MAIN_TARGET}"
      "${BUILD_DEPENDS}"
      "${REF_COMMIT}")

    __ade_clang_format_fix_target(
      "${format_type}"
      "${tgt}"
      "${format_fix_tgt}"
      "${COMMAND}"
      "${FIX_MAIN_TARGET}"
      "${REF_COMMIT}")
  endforeach()
endfunction()

function(ade_clang_format_plain_targets)
  __ade_clang_format_targets_catchall(plain ${ARGN})
endfunction()

function(ade_clang_format_git_targets)
  __ade_clang_format_targets_catchall(git ${ARGN})
endfunction()

function(ade_clang_format_targets)
  message(DEPRECATION
    "ade_clang_format_targets() is deprecated; just replace uses of it by ade_clang_format_plain_targets(). Also consider transitioning to ade_clang_format_git_targets() instead; see https://github.com/adentinger/AdeClangFormat/blob/main/doc/git-clang-format.md")

  ade_clang_format_plain_targets(${ARGN})
endfunction()
